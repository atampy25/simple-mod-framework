name: PR Build

on:
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: buildCachev25

      - name: Cache
        id: cache2
        uses: actions/cache@v2.1.6
        with:
          path: Mod Manager/node_modules
          key: buildCache2v20

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm install

      - name: Prep
        run: |
          npm install -g pkg typescript

      - name: Build EXE
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          New-Item -ItemType Directory -Force -Path ./node_modules/piscina
          robocopy ./piscina ./node_modules/piscina /COPYALL /E /is /it; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          tsc
          copy ./src/smf-rust.node ./compiled/smf-rust.node
          pkg package.json --targets node18-win-x64 --output Deploy.exe --compress Brotli

      - name: Download RPKG
        uses: aochmann/actions-download-artifact@5709392f11b5937bd316e52687ad87f7deced5f5
        with:
          repo: glacier-modding/RPKG-Tool
          name: rpkg-cli
          latest: true
          path: './Third-Party'

      - name: Download ResourceTool
        uses: aochmann/actions-download-artifact@5709392f11b5937bd316e52687ad87f7deced5f5
        with:
          repo: OrfeasZ/ZHMTools
          name: ResourceTool-win-x64
          latest: true
          path: './Third-Party'

      - name: Install GUI dependencies
        if: steps.cache2.outputs.cache-hit != 'true'
        run: |
          cd "Mod Manager"
          npm install
          cd ../

      - name: Build GUI
        run: |
          cd "Mod Manager"
          npm run build
          cd ../

      - name: Ready for zip
        run: |
          New-Item -ItemType Directory dist
          New-Item -ItemType Directory dist/Third-Party
          New-Item -ItemType Directory dist/Info
          New-Item -ItemType Directory dist/API
          New-Item -ItemType Directory "dist/Mod Manager"
          robocopy ./Third-Party ./dist/Third-Party /COPYALL /E; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          robocopy "./For Build" ./dist /COPYALL /E; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          robocopy ./docs ./dist/Info /COPYALL /E; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          robocopy ./compiled ./dist/API /COPYALL /E *.d.ts; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          robocopy ".\Mod Manager\dist\win-unpacked" "./dist/Mod Manager" /COPYALL /E; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
          copy Deploy.exe dist
          New-Item -Path dist -Name "Mod Manager.cmd" -ItemType "file" -Value "@echo off`ncd `"Mod Manager`"`nstart `"`" `"Mod Manager.exe`""

      - uses: actions/upload-artifact@v2
        with:
          name: Output
          path: dist
